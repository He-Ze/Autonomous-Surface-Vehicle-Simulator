package renderables.texture.generated;

import java.nio.ByteBuffer;

import loader.LoadedObjectHandler.LoadStage;
import renderables.texture.TextureInfo;

public class GeneratedTextureInfo extends TextureInfo {

	@Override
	public LoadStage[] stagesToPerform(){
		return new LoadStage[] {
//				LoadStage.LOAD_DATA_FROM_FILE,
//				LoadStage.HANDLE_RAW_DATA,
//				LoadStage.LOAD_DEPENDENCIES,
		};
	}

	//Number of bytes that make up a pixel
	public static final int BYTES_PER_PIXEL = 4; // RGBA

	/**
	 * For any texture that is AUTO-GENERATED by OpenGl.
	 * @param textureId
	 * @param textureWidth
	 * @param textureHeight
     */
	public GeneratedTextureInfo(int textureId, int textureWidth, int textureHeight) {
		this.filePath = "This texture is AUTO-GENERATED by OpenGL.";
		this.textureID = textureId;
		this.tWidth = textureWidth;
		this.tHeight = textureHeight;
	}

	/**
	 * Default Constructor.
	 * @param uniqueId
	 * @param texUnit
	 * @param buffer
	 * @param textureWidth
	 * @param textureHeight
     * @param hasAlpha
     */
	public GeneratedTextureInfo(String uniqueId, int texUnit, ByteBuffer buffer, int textureWidth, int textureHeight, boolean hasAlpha){
		this.buf = buffer;
		this.textureUnit = texUnit;
		this.filePath = uniqueId;
		this.tWidth = textureWidth;
		this.tHeight = textureHeight;
		this.hasAlpha = hasAlpha;
		buf.position(0);
		completeLoad(null);
	}

	/**
	 * Default constructor.
	 * @param uniqueId
	 * @param texUnit
	 * @param buffer
	 * @param textureWidth
	 * @param textureHeight
     */
	public GeneratedTextureInfo(String uniqueId, int texUnit, ByteBuffer buffer, int textureWidth, int textureHeight){
		//Determine whether it has alpha or not.
		this(uniqueId, texUnit, buffer, textureWidth, textureHeight, textureHasAlpha(buffer));
	}

	/**
	 * Determines whether a texture has alpha or not by checking all of the alpha pixels.
	 * @param buf
	 * @return
     */
	public static boolean textureHasAlpha(ByteBuffer buf){
		boolean hasAlpha = false;
		for(int i = 0; i < (buf.limit() / BYTES_PER_PIXEL); i++){
			//Iterate through all pixels and determine whether any of them
			//Have an alpha value != 0xFF.
			Byte red = buf.get();
			Byte green = buf.get();
			Byte blue = buf.get();
			Byte alpha = buf.get();
			if(alpha != 0xFF){
				hasAlpha = true;
				break;
			}
		}
		return hasAlpha;
	}
}
